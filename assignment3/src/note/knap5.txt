int N = totalListOfItems.size();
int W = weightCapacity;

int[] profit = new int[N + 1];
int[] weight = new int[N + 1];

for (int n = 1; n <= N; n++) {
	profit[n] = totalListOfItems.get(n - 1).getValue();
	weight[n] = totalListOfItems.get(n - 1).getWeight();
}

int[][] opt = new int[N + 1][W + 1];
boolean[][] sol = new boolean[N + 1][W + 1];

for (int n = 1; n <= N; n++) {
	for (int w = 1; w <= W; w++) {
		int option1 = opt[n-1][w];

		int option2 = Integer.MIN_VALUE;
		if (weight[n] <= w)
			option2 = profit[n] + opt[n-1][w-weight[n]];

		opt[n][w] = Math.max(option1, option2);
		sol[n][w] = (option2 > option1);
	}
}

boolean[] take = new boolean[N+1];
for (int n = N, w = W; n > 0; n--) {
	if (sol[n][w]) {
		take[n] = true;
		w = w - weight[n];
	} else {
		take[n] = false;
	}
}

for (int n = 1; n <= N; n++)
	if(take[n])
		optimalSelection.add(true);
	else
		optimalSelection.add(false);